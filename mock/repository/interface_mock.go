// Code generated by MockGen. DO NOT EDIT.
// Source: repository/interface.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	sql "database/sql"
	model "privy-test/model"
	cake "privy-test/param/cake"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStatement is a mock of Statement interface.
type MockStatement struct {
	ctrl     *gomock.Controller
	recorder *MockStatementMockRecorder
}

// MockStatementMockRecorder is the mock recorder for MockStatement.
type MockStatementMockRecorder struct {
	mock *MockStatement
}

// NewMockStatement creates a new mock instance.
func NewMockStatement(ctrl *gomock.Controller) *MockStatement {
	mock := &MockStatement{ctrl: ctrl}
	mock.recorder = &MockStatementMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatement) EXPECT() *MockStatementMockRecorder {
	return m.recorder
}

// Statement mocks base method.
func (m *MockStatement) Statement(ctx context.Context, name string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statement", ctx, name)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statement indicates an expected call of Statement.
func (mr *MockStatementMockRecorder) Statement(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statement", reflect.TypeOf((*MockStatement)(nil).Statement), ctx, name)
}

// MockCakeRepository is a mock of CakeRepository interface.
type MockCakeRepository struct {
	ctrl     *gomock.Controller
	recorder *MockCakeRepositoryMockRecorder
}

// MockCakeRepositoryMockRecorder is the mock recorder for MockCakeRepository.
type MockCakeRepositoryMockRecorder struct {
	mock *MockCakeRepository
}

// NewMockCakeRepository creates a new mock instance.
func NewMockCakeRepository(ctrl *gomock.Controller) *MockCakeRepository {
	mock := &MockCakeRepository{ctrl: ctrl}
	mock.recorder = &MockCakeRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCakeRepository) EXPECT() *MockCakeRepositoryMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCakeRepository) Create(ctx context.Context, cakeModel *model.Cake) (*model.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, cakeModel)
	ret0, _ := ret[0].(*model.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCakeRepositoryMockRecorder) Create(ctx, cakeModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCakeRepository)(nil).Create), ctx, cakeModel)
}

// Delete mocks base method.
func (m *MockCakeRepository) Delete(ctx context.Context, cakeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, cakeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCakeRepositoryMockRecorder) Delete(ctx, cakeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCakeRepository)(nil).Delete), ctx, cakeID)
}

// GetDetail mocks base method.
func (m *MockCakeRepository) GetDetail(ctx context.Context, cakeID int64) (*model.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", ctx, cakeID)
	ret0, _ := ret[0].(*model.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockCakeRepositoryMockRecorder) GetDetail(ctx, cakeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockCakeRepository)(nil).GetDetail), ctx, cakeID)
}

// GetList mocks base method.
func (m *MockCakeRepository) GetList(ctx context.Context, request *cake.FindAllRequest) ([]model.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, request)
	ret0, _ := ret[0].([]model.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockCakeRepositoryMockRecorder) GetList(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockCakeRepository)(nil).GetList), ctx, request)
}

// Statement mocks base method.
func (m *MockCakeRepository) Statement(ctx context.Context, name string) (*sql.Stmt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Statement", ctx, name)
	ret0, _ := ret[0].(*sql.Stmt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Statement indicates an expected call of Statement.
func (mr *MockCakeRepositoryMockRecorder) Statement(ctx, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Statement", reflect.TypeOf((*MockCakeRepository)(nil).Statement), ctx, name)
}

// Update mocks base method.
func (m *MockCakeRepository) Update(ctx context.Context, cakeID int64, cakeModel *model.Cake) (*model.Cake, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, cakeID, cakeModel)
	ret0, _ := ret[0].(*model.Cake)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCakeRepositoryMockRecorder) Update(ctx, cakeID, cakeModel interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCakeRepository)(nil).Update), ctx, cakeID, cakeModel)
}
