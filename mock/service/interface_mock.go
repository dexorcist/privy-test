// Code generated by MockGen. DO NOT EDIT.
// Source: service/interface.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	context "context"
	cake "privy-test/param/cake"
	healthcheck "privy-test/param/healthcheck"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockHealthCheckService is a mock of HealthCheckService interface.
type MockHealthCheckService struct {
	ctrl     *gomock.Controller
	recorder *MockHealthCheckServiceMockRecorder
}

// MockHealthCheckServiceMockRecorder is the mock recorder for MockHealthCheckService.
type MockHealthCheckServiceMockRecorder struct {
	mock *MockHealthCheckService
}

// NewMockHealthCheckService creates a new mock instance.
func NewMockHealthCheckService(ctrl *gomock.Controller) *MockHealthCheckService {
	mock := &MockHealthCheckService{ctrl: ctrl}
	mock.recorder = &MockHealthCheckServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockHealthCheckService) EXPECT() *MockHealthCheckServiceMockRecorder {
	return m.recorder
}

// HealthCheck mocks base method.
func (m *MockHealthCheckService) HealthCheck(ctx context.Context) healthcheck.HTTPHealthCheckResponse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HealthCheck", ctx)
	ret0, _ := ret[0].(healthcheck.HTTPHealthCheckResponse)
	return ret0
}

// HealthCheck indicates an expected call of HealthCheck.
func (mr *MockHealthCheckServiceMockRecorder) HealthCheck(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthCheck", reflect.TypeOf((*MockHealthCheckService)(nil).HealthCheck), ctx)
}

// MockCakeService is a mock of CakeService interface.
type MockCakeService struct {
	ctrl     *gomock.Controller
	recorder *MockCakeServiceMockRecorder
}

// MockCakeServiceMockRecorder is the mock recorder for MockCakeService.
type MockCakeServiceMockRecorder struct {
	mock *MockCakeService
}

// NewMockCakeService creates a new mock instance.
func NewMockCakeService(ctrl *gomock.Controller) *MockCakeService {
	mock := &MockCakeService{ctrl: ctrl}
	mock.recorder = &MockCakeServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCakeService) EXPECT() *MockCakeServiceMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockCakeService) Create(ctx context.Context, request *cake.CreateUpdateRequest) (*cake.HTTPGetDetailCakeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", ctx, request)
	ret0, _ := ret[0].(*cake.HTTPGetDetailCakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockCakeServiceMockRecorder) Create(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockCakeService)(nil).Create), ctx, request)
}

// Delete mocks base method.
func (m *MockCakeService) Delete(ctx context.Context, cakeID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", ctx, cakeID)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockCakeServiceMockRecorder) Delete(ctx, cakeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockCakeService)(nil).Delete), ctx, cakeID)
}

// GetDetail mocks base method.
func (m *MockCakeService) GetDetail(ctx context.Context, cakeID int64) (*cake.HTTPGetDetailCakeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetDetail", ctx, cakeID)
	ret0, _ := ret[0].(*cake.HTTPGetDetailCakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetDetail indicates an expected call of GetDetail.
func (mr *MockCakeServiceMockRecorder) GetDetail(ctx, cakeID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetDetail", reflect.TypeOf((*MockCakeService)(nil).GetDetail), ctx, cakeID)
}

// GetList mocks base method.
func (m *MockCakeService) GetList(ctx context.Context, request *cake.FindAllRequest) (*cake.HTTPGetListCakeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetList", ctx, request)
	ret0, _ := ret[0].(*cake.HTTPGetListCakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetList indicates an expected call of GetList.
func (mr *MockCakeServiceMockRecorder) GetList(ctx, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetList", reflect.TypeOf((*MockCakeService)(nil).GetList), ctx, request)
}

// Update mocks base method.
func (m *MockCakeService) Update(ctx context.Context, cakeID int64, request *cake.CreateUpdateRequest) (*cake.HTTPGetDetailCakeResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", ctx, cakeID, request)
	ret0, _ := ret[0].(*cake.HTTPGetDetailCakeResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update.
func (mr *MockCakeServiceMockRecorder) Update(ctx, cakeID, request interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockCakeService)(nil).Update), ctx, cakeID, request)
}
