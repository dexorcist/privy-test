// Code generated by MockGen. DO NOT EDIT.
// Source: integration/logging/logging.go

// Package mock_logging is a generated GoMock package.
package mock_logging

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockLogger is a mock of Logger interface.
type MockLogger struct {
	ctrl     *gomock.Controller
	recorder *MockLoggerMockRecorder
}

// MockLoggerMockRecorder is the mock recorder for MockLogger.
type MockLoggerMockRecorder struct {
	mock *MockLogger
}

// NewMockLogger creates a new mock instance.
func NewMockLogger(ctrl *gomock.Controller) *MockLogger {
	mock := &MockLogger{ctrl: ctrl}
	mock.recorder = &MockLoggerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockLogger) EXPECT() *MockLoggerMockRecorder {
	return m.recorder
}

// DebugWithContext mocks base method.
func (m *MockLogger) DebugWithContext(ctx context.Context, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "DebugWithContext", varargs...)
}

// DebugWithContext indicates an expected call of DebugWithContext.
func (mr *MockLoggerMockRecorder) DebugWithContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DebugWithContext", reflect.TypeOf((*MockLogger)(nil).DebugWithContext), varargs...)
}

// Debugf mocks base method.
func (m *MockLogger) Debugf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Debugf", varargs...)
}

// Debugf indicates an expected call of Debugf.
func (mr *MockLoggerMockRecorder) Debugf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debugf", reflect.TypeOf((*MockLogger)(nil).Debugf), varargs...)
}

// Error mocks base method.
func (m *MockLogger) Error(err error, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{err, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Error", varargs...)
}

// Error indicates an expected call of Error.
func (mr *MockLoggerMockRecorder) Error(err, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{err, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockLogger)(nil).Error), varargs...)
}

// ErrorWithContext mocks base method.
func (m *MockLogger) ErrorWithContext(ctx context.Context, err error, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, err, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "ErrorWithContext", varargs...)
}

// ErrorWithContext indicates an expected call of ErrorWithContext.
func (mr *MockLoggerMockRecorder) ErrorWithContext(ctx, err, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, err, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ErrorWithContext", reflect.TypeOf((*MockLogger)(nil).ErrorWithContext), varargs...)
}

// Errorf mocks base method.
func (m *MockLogger) Errorf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Errorf", varargs...)
}

// Errorf indicates an expected call of Errorf.
func (mr *MockLoggerMockRecorder) Errorf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Errorf", reflect.TypeOf((*MockLogger)(nil).Errorf), varargs...)
}

// InfoWithContext mocks base method.
func (m *MockLogger) InfoWithContext(ctx context.Context, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "InfoWithContext", varargs...)
}

// InfoWithContext indicates an expected call of InfoWithContext.
func (mr *MockLoggerMockRecorder) InfoWithContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InfoWithContext", reflect.TypeOf((*MockLogger)(nil).InfoWithContext), varargs...)
}

// WarnWithContext mocks base method.
func (m *MockLogger) WarnWithContext(ctx context.Context, msg string, args ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{ctx, msg}
	for _, a := range args {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "WarnWithContext", varargs...)
}

// WarnWithContext indicates an expected call of WarnWithContext.
func (mr *MockLoggerMockRecorder) WarnWithContext(ctx, msg interface{}, args ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{ctx, msg}, args...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WarnWithContext", reflect.TypeOf((*MockLogger)(nil).WarnWithContext), varargs...)
}

// Warnf mocks base method.
func (m *MockLogger) Warnf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warnf", varargs...)
}

// Warnf indicates an expected call of Warnf.
func (mr *MockLoggerMockRecorder) Warnf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warnf", reflect.TypeOf((*MockLogger)(nil).Warnf), varargs...)
}

// Warningf mocks base method.
func (m *MockLogger) Warningf(format string, v ...interface{}) {
	m.ctrl.T.Helper()
	varargs := []interface{}{format}
	for _, a := range v {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Warningf", varargs...)
}

// Warningf indicates an expected call of Warningf.
func (mr *MockLoggerMockRecorder) Warningf(format interface{}, v ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]interface{}{format}, v...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warningf", reflect.TypeOf((*MockLogger)(nil).Warningf), varargs...)
}
